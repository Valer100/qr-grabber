name: Release with Hashes
on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  generate-hashes:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Verify dist directory exists
        run: |
          if [ ! -d "./dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi

      - name: Check for executable files
        id: check_files
        run: |
          if [ -z "$(ls -A ./dist/*.exe 2>/dev/null)" ]; then
            echo "Error: No .exe files found in dist directory"
            exit 1
          fi

      - name: Generate Hashes
        id: generate_hashes
        run: |
          {
            echo "# Security Hashes for Release Files"
            echo "Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            echo "| Filename | Hash Type | Hash Value |"
            echo "|----------|-----------|------------|"
            
            for file in ./dist/*.exe; do
              filename=$(basename "$file")
              
              # Calculate hashes in parallel for better performance
              md5=$(md5sum "$file" | cut -d' ' -f1) &
              sha1=$(sha1sum "$file" | cut -d' ' -f1) &
              sha256=$(sha256sum "$file" | cut -d' ' -f1) &
              sha512=$(sha512sum "$file" | cut -d' ' -f1) &
              wait
              
              # Store in organized table format
              echo "| $filename | MD5 | \`$md5\` |"
              echo "| $filename | SHA-1 | \`$sha1\` |"
              echo "| $filename | SHA-256 | \`$sha256\` |"
              echo "| $filename | SHA-512 | \`$sha512\` |"
            done
          } > hashes.txt
          
          # Save hashes as artifact
          echo "hash_file=hashes.txt" >> "$GITHUB_OUTPUT"

      - name: Upload hashes as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-hashes
          path: hashes.txt
          retention-days: 30

      - name: Update Release Notes
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read hash file
              const hashes = fs.readFileSync('hashes.txt', 'utf8');
              
              // Get current release
              const release = await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
              });
              
              // Prepare updated body with clear separation
              const updatedBody = `${release.data.body}\n\n---\n\n${hashes}`;
              
              // Update release
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                body: updatedBody,
              });
              
              console.log('Successfully updated release notes with hashes');
            } catch (error) {
              console.error('Error updating release notes:', error);
              core.setFailed(error.message);
            }